#!/bin/bash


#*****************************************************************************
#
# run
#     Script for running SV in dev environment
#
#
#*****************************************************************************
#
#
# Copyright 2013-2022 Arden.ai, Inc.
#
# Licensed under the GNU GPLv3 license found at
# https://www.gnu.org/licenses/gpl-3.0.txt
#
# Alternative licensing available from Arden.ai, Inc.
# by emailing opensource@ardenai.com
#
# This file is part of the Arden AI project which can be found at
# https://github.com/ardenaiinc/ArdenAI
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; using version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111, USA.
#
#
#*****************************************************************************

#
# Handy shell script for running the passed command in our environment.

if [ "$#" == "0" -o "$1" == "--help" ]; then
  echo "Usage: $0 commandToRun [args]"
  exit 1
fi

# Run the "setupEnvironment" script to get our PATH updated, and make sure to
# tell it that we wish to run from source by setting the DEVEL_ENV environment
# variable to 1.
DEVEL_ENV=1
source setupEnvironment


# Run!
set +e
pycheckLoc=`which doPycheck 2> /dev/null`
if [ "`basename $1 .py`.py" != "`basename $1`" ]; then
  # The thing we're running doesn't end with ".py", so just run it directly.
  "$@"
elif [ -z "$pycheckLoc" ]; then
  echo Pychecker script not found--running directly...
  "$@"
else
  doPycheck --run "$@"
fi
